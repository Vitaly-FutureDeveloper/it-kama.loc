{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","components/Dialogs/Dialogs.module.css","utils/validators/validators.ts","components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","undefined","maxLenghtCreator","maxLenght","ERR_MSG","length","DialogItem","id","path","cn","dialog","active","to","Message","message","massage","maxLenght50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","formBlock","btnSendBlock","Dialogs","dialogsPage","dispatch","sendMessage","useDispatch","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","actions","newMessageBody","compose","connect","state","withAuthRedirect"],"mappings":"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","file":"static/js/5.942546f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\nimport {WrappedFieldMetaProps} from \"redux-form/lib/Field\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n\tmeta: WrappedFieldMetaProps,\r\n\tchildren: React.ReactNode,\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\tconst hasError = touched && error;\r\n\treturn (\r\n\t\t<div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n\t\t\t<div>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t\t{ hasError && <span>{error}</span> }\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport const Textarea:React.FC<WrappedFieldProps> = (props) => {\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn (\r\n\t\t<FormControl {...props} >\r\n\t\t\t<input {...input} {...restProps} />\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport const Input:React.FC<WrappedFieldProps> = (props) => {\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn (\r\n\t\t<FormControl {...props}>\r\n\t\t\t<input {...input} {...restProps} />\r\n\t\t</FormControl>\r\n\t);\r\n};\r\nexport type GetStringKeys<T> =  Extract <keyof T, string>;\r\n\r\nexport function createField<FormKeysType extends string> (placeholder:string | undefined,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: FormKeysType,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalidators:Array<FieldValidatorType>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent:React.FC<WrappedFieldProps>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops= {},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext=\"\")\r\n{\r\n\treturn <div>\r\n\t\t<Field name={name}\r\n\t\t\t\t\t validate={validators}\r\n\t\t\t\t\t placeholder={placeholder}\r\n\t\t\t\t\t component={component}\r\n\t\t\t\t\t {...props}\r\n\t\t/> {text}\r\n\t</div>\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__32uWb\",\"error\":\"FormsControls_error__3Jep2\",\"formSummaryError\":\"FormsControls_formSummaryError__2nVCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2EZ-5\",\"dialogsItems\":\"Dialogs_dialogsItems__2kr04\",\"active\":\"Dialogs_active__2OFE6\",\"dialog\":\"Dialogs_dialog__3At04\",\"messages\":\"Dialogs_messages__3IHp5\",\"massage\":\"Dialogs_massage__3DzzC\"};","export type FieldValidatorType = (value:string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value:string): string | undefined => {\r\n\tconst ERR_MSG = \"Поле не должно быть пустым\";\r\n\treturn value ? undefined : ERR_MSG;\r\n};\r\n\r\nexport const maxLenghtCreator = (maxLenght:number): FieldValidatorType => (value) => {\r\n\tconst ERR_MSG = `Поле должно содержать максимум ${maxLenght} символов`;\r\n\treturn (value.length <= maxLenght) ? undefined : ERR_MSG;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"AddMessageForm_formBlock__3VugE\",\"btnSendBlock\":\"AddMessageForm_btnSendBlock__k9DHA\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PropsType = {\r\n\tid:number,\r\n\tname:string,\r\n};\r\nconst DialogItem:React.FC<PropsType> = ({id, name}) => {\r\n\tconst path = \"/dialogs/\" + id;\r\n\r\n\treturn (\r\n\t\t<div className={cn(s.dialog, s.active)}>\r\n\t\t\t<NavLink to={path}>\r\n\t\t\t\t{name}\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\ntype PropsType = {\r\n\tmessage:string\r\n};\r\nconst Message:React.FC<PropsType> = ({message}) => {\r\n\treturn (\r\n\t\t<div className={s.massage}>{message}</div>\r\n\t);\r\n};\r\n\r\nexport default Message;","import * as React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport {maxLenghtCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from \"./AddMessageForm.module.css\";\r\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLenght50 = maxLenghtCreator(50);\r\n\r\nexport type NewMessageFormType = {\r\n\tnewMessageBody:string,\r\n};\r\ntype NewMessageFormValuesTypeKeys = Extract <keyof NewMessageFormType, string>;\r\ntype PropsType = {};\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<NewMessageFormType & PropsType> & PropsType> = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t<div className=\"\">\r\n\t\t\t\t\t{createField<NewMessageFormValuesTypeKeys>(\"Введите своё сообщение\", \"newMessageBody\", [required, maxLenght50], Textarea)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={s.btnSendBlock}>\r\n\t\t\t\t\t<button className=\"btn btn-send\">Отправить</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm);","import * as React from 'react';\r\n\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {actions, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageFormRedux, NewMessageFormType} from \"./AddMessageForm/AddMessageForm\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype PropsType = {\r\n\tdialogsPage: InitialStateType,\r\n\tsendMessage: (messageText:string) => void,\r\n};\r\n\r\nconst Dialogs:React.FC<PropsType> = ({ dialogsPage, sendMessage}) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst addNewMessage = (values: NewMessageFormType) => {\r\n\t\tdispatch(actions.sendMessage(values.newMessageBody));\r\n\t};\r\n\r\n\tconst dialogsElements = dialogsPage.dialogs\r\n\t\t.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n\tconst messagesElements = dialogsPage.messages\r\n\t\t.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n\r\n\treturn (\r\n\t\t<div className={s.dialogs}>\r\n\t\t\t<div className={s.dialogsItems}>\r\n\t\t\t\t{dialogsElements}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className={s.messages}>\r\n\t\t\t\t{messagesElements}\r\n\t\t\t</div>\r\n\r\n\t\t\t<AddMessageFormRedux onSubmit={addNewMessage} />\r\n\t\t\t{/*Form*/}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n\r\n\r\nexport default Dialogs;","import * as React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\n// type MapDispatchPropsType = {\r\n// \tsendMessage: (newMessageBody:string) => void,\r\n// };\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage\r\n\t};\r\n};\r\n\r\n// const mapDispatchToProps:MapDispatchPropsType =  {\r\n// \tsendMessage: (newMessageBody) => {\r\n// \t\tdebugger\r\n// \t\tactions.sendMessage(newMessageBody);\r\n// \t},\r\n// };\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n\tconnect(mapStateToProps),\r\n\twithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}