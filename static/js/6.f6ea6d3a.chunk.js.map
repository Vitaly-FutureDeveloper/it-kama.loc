{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","Login/login.module.css","assets/img/iconLogin.png","Login/LoginPage.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","undefined","maxLenghtCreator","maxLenght","ERR_MSG","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","formSummaryError","cn","loginBtn","style","backgroundImage","loginBtnBackground","LoginPage","useSelector","state","auth","isAuth","dispatch","useDispatch","to","formData","login","email","password","rememberMe","captcha"],"mappings":"2QAYMA,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACvEC,EAAWH,GAAWC,EAC5B,OACC,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACC,8BACEC,IAEAC,GAAY,+BAAOF,QAMXM,EAAuC,SAACC,GAAW,IACxDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADgD,YAC1BS,EAD0B,mBAE9D,OACC,cAACV,EAAD,2BAAiBU,GAAjB,aACC,iDAAWC,GAAWC,QAKZC,EAAoC,SAACH,GAAW,IACrDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD6C,YACvBS,EADuB,mBAE3D,OACC,cAACV,EAAD,2BAAiBU,GAAjB,aACC,iDAAWC,GAAWC,QAMlB,SAASE,EAA0CC,EAC5CC,EACAC,EACAC,GAGb,IAFaR,EAEd,uDAFqB,GACPS,EACd,uDADmB,GAElB,OAAO,gCACN,cAAC,IAAD,aAAOH,KAAMA,EACTI,SAAUH,EACVF,YAAaA,EACbG,UAAWA,GACPR,IALF,IAMFS,O,oBCxDNE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCC3H,oEAAO,IAAMC,EAA+B,SAACC,GAE5C,OAAOA,OAAQC,EADC,4IAIJC,EAAmB,SAACC,GAAD,OAA0C,SAACH,GAC1E,IAAMI,EAAO,gLAAqCD,EAArC,qDACb,OAAQH,EAAMK,QAAUF,OAAaF,EAAYG,K,oBCRlDP,EAAOC,QAAU,CAAC,SAAW,0B,+ICDd,MAA0B,sCCkDnCQ,EAAiBC,YAAkD,CAExEC,KAAM,SAFgBD,EAnCoF,SAAC,GAAsC,IAArCE,EAAoC,EAApCA,aAAc9B,EAAsB,EAAtBA,MAAO+B,EAAe,EAAfA,WAEjI,OACC,uBAAMC,SAAUF,EAAhB,UACC,gCACEnB,YAAqC,QAAS,QAAS,CAACS,KAAWV,IAAO,CAACuB,KAAM,SAEjFtB,YAAqC,WAAY,WAAY,CAACS,KAAWV,IAAO,CAACuB,KAAM,aAEvFtB,iBAAqCW,EAAW,aAAc,GAAIZ,IAAO,CAACuB,KAAM,YAAa,eAG7FF,GAAc,qBAAKG,IAAKH,IAIxBA,GAAcpB,YAAY,6CAAW,UAAW,CAACS,KAAWV,IAAO,CAACuB,KAAM,YAI1EjC,GAAS,qBAAKG,UAAWC,IAAE+B,iBAAlB,SACTnC,IAGF,8BACC,wBAASG,UAAWiC,IAAG,MAAOhC,IAAEiC,UAC3BC,MAAO,CACXC,gBAAgB,OAAD,OAASC,EAAT,gBAoDLC,UApBuB,SAAClC,GAEtC,IAAMwB,EAAaW,aAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKb,cAC5Dc,EAASH,aAAY,SAACC,GAAD,OAAwBA,EAAMC,KAAKC,UACxDC,EAAWC,cAMjB,OAAIF,EACI,cAAC,IAAD,CAAUG,GAAI,aAGf,gCACN,uCACA,cAACrB,EAAD,CAAgBK,SAVA,SAACiB,GACjBH,EAASI,YAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAS5CvB,WAAYA","file":"static/js/6.f6ea6d3a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\nimport {WrappedFieldMetaProps} from \"redux-form/lib/Field\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n\tmeta: WrappedFieldMetaProps,\r\n\tchildren: React.ReactNode,\r\n};\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\tconst hasError = touched && error;\r\n\treturn (\r\n\t\t<div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n\t\t\t<div>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t\t{ hasError && <span>{error}</span> }\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport const Textarea:React.FC<WrappedFieldProps> = (props) => {\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn (\r\n\t\t<FormControl {...props} >\r\n\t\t\t<input {...input} {...restProps} />\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport const Input:React.FC<WrappedFieldProps> = (props) => {\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn (\r\n\t\t<FormControl {...props}>\r\n\t\t\t<input {...input} {...restProps} />\r\n\t\t</FormControl>\r\n\t);\r\n};\r\nexport type GetStringKeys<T> =  Extract <keyof T, string>;\r\n\r\nexport function createField<FormKeysType extends string> (placeholder:string | undefined,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: FormKeysType,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalidators:Array<FieldValidatorType>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent:React.FC<WrappedFieldProps>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops= {},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext=\"\")\r\n{\r\n\treturn <div>\r\n\t\t<Field name={name}\r\n\t\t\t\t\t validate={validators}\r\n\t\t\t\t\t placeholder={placeholder}\r\n\t\t\t\t\t component={component}\r\n\t\t\t\t\t {...props}\r\n\t\t/> {text}\r\n\t</div>\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__32uWb\",\"error\":\"FormsControls_error__3Jep2\",\"formSummaryError\":\"FormsControls_formSummaryError__2nVCF\"};","export type FieldValidatorType = (value:string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value:string): string | undefined => {\r\n\tconst ERR_MSG = \"Поле не должно быть пустым\";\r\n\treturn value ? undefined : ERR_MSG;\r\n};\r\n\r\nexport const maxLenghtCreator = (maxLenght:number): FieldValidatorType => (value) => {\r\n\tconst ERR_MSG = `Поле должно содержать максимум ${maxLenght} символов`;\r\n\treturn (value.length <= maxLenght) ? undefined : ERR_MSG;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBtn\":\"login_loginBtn__1EN7N\"};","export default __webpack_public_path__ + \"static/media/iconLogin.13ec6ccc.png\";","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport {createField, GetStringKeys, Input} from \"../components/common/FormsControls/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\nimport {login} from \"../redux/auth-reducer\";\r\nimport cn from \"classnames\";\r\n\r\nimport s from \"./login.module.css\"\r\nimport loginBtnBackground from \"../assets/img/iconLogin.png\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<LoginFormValuesType & LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) =>{\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(\"email\", \"email\", [required], Input, {type: \"text\"})}\r\n\r\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(\"password\", \"password\", [required], Input, {type: \"password\"})}\r\n\r\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember Me\")}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tcaptchaUrl && <img src={captchaUrl} />\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tcaptchaUrl && createField(\"Антибот\", \"captcha\", [required], Input, {type: \"text\"})\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\t\t\t{ error && <div className={s.formSummaryError}>\r\n\t\t\t\t{error}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div>\r\n\t\t\t\t<button  className={cn('btn', s.loginBtn)}\r\n\t\t\t\t\t\t\t\t style={{\r\n\t\t\t\t\tbackgroundImage: `url(${loginBtnBackground})`,\r\n\t\t\t\t}}></button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n\t// a unique name for the form\r\n\tform: 'login'\r\n})\r\n//@ts-ignore\r\n(LoginForm);\r\n// todo: types for reduxforms\r\n\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n\tcaptchaUrl:string | null,\r\n};\r\ntype LoginFormValuesType = {\r\n\temail:string,\r\n\tpassword:string,\r\n\trememberMe:boolean,\r\n\tcaptcha:string,\r\n};\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\n\r\ntype PropsType = {};\r\n\r\nconst LoginPage:React.FC<PropsType> = (props) =>{\r\n\r\n\tconst captchaUrl = useSelector((state:AppStateType) => state.auth.captchaUrl);\r\n\tconst isAuth = useSelector((state:AppStateType) => state.auth.isAuth);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst onSubmit = (formData:any) => {\r\n\t\tdispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n\t};\r\n\r\n\tif (isAuth){\r\n\t\treturn <Redirect to={\"/Profile\"} />\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<h1>Login</h1>\r\n\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n\t</div>;\r\n};\r\n\r\nexport default LoginPage;\r\n\r\n"],"sourceRoot":""}