{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","Login/login.module.css","Login/Login.tsx"],"names":["FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","undefined","maxLenghtCreator","maxLenght","ERR_MSG","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","formSummaryError","cn","loginBtn","style","backgroundImage","loginBtnBackground","mapDispatchToProps","login","logout","connect","state","isAuth","auth","to","formData","email","password","rememberMe","captcha"],"mappings":"2QAIMA,EAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC9CC,EAAWH,GAAWC,EAC5B,OACC,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACC,8BACEC,IAEAC,GAAY,+BAAOF,QAKXM,EAAW,SAACC,GAAW,IAC5BV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADc,YACSF,EADT,2BAElC,OACC,cAACX,EAAD,2BAAiBW,GAAjB,aACC,iDAAWV,GAAWW,QAKZE,EAAQ,SAACH,GAAW,IACzBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADW,YACYF,EADZ,2BAE/B,OACC,cAACX,EAAD,2BAAiBW,GAAjB,aACC,iDAAWV,GAAWW,QAKZG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CR,EAA3C,uDAAkD,GAAIS,EAAtD,uDAA2D,GAA3D,OACzB,gCACE,cAAC,IAAD,aAAOH,KAAMA,EACTI,SAAUH,EACVF,YAAaA,EACbG,UAAWA,GACPR,IALV,IAMMS,O,oBCxCRE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GAExB,OAAOA,OAAQC,EADC,4IAIJC,EAAmB,SAACC,GAAD,OAAe,SAACH,GAC/C,IAAMI,EAAO,gLAAqCD,EAArC,qDACb,OAAQH,EAAMK,QAAUF,OAAaF,EAAYG,K,oBCNlDP,EAAOC,QAAU,CAAC,SAAW,0B,uJCiDvBQ,EAAiBC,YAAkD,CAExEC,KAAM,SAFgBD,EAlCoF,SAAC,GAAsC,IAArCE,EAAoC,EAApCA,aAAc9B,EAAsB,EAAtBA,MAAO+B,EAAe,EAAfA,WAEjI,OACC,uBAAMC,SAAUF,EAAhB,UACC,gCACEnB,YAAY,QAAS,QAAS,CAACS,KAAWV,IAAO,CAACuB,KAAM,SAExDtB,YAAY,WAAY,WAAY,CAACS,KAAWV,IAAO,CAACuB,KAAM,aAE9DtB,YAAY,KAAM,aAAc,GAAID,IAAO,CAACuB,KAAM,YAAa,eAG/DF,GAAc,qBAAKG,IAAKH,IAIxBA,GAAcpB,YAAY,6CAAW,UAAW,CAACS,KAAWV,IAAO,CAACuB,KAAM,YAI1EjC,GAAS,qBAAKG,UAAWC,IAAE+B,iBAAlB,SACTnC,IAGF,8BACC,wBAASG,UAAWiC,IAAG,MAAOhC,IAAEiC,UAC3BC,MAAO,CACXC,gBAAgB,OAAD,OAASC,IAAT,gBAqDdC,EAA0C,CAC/CC,UACAC,YAGcC,uBAZS,SAACC,GACxB,MAAO,CACNC,OAAQD,EAAME,KAAKD,OACnBf,WAAYc,EAAME,KAAKhB,cASeU,EAAzBG,EA3BmB,SAACrC,GAKlC,OAAIA,EAAMuC,OACF,cAAC,IAAD,CAAUE,GAAI,aAGf,gCACN,uCACA,cAACrB,EAAD,CAAgBK,SAVA,SAACiB,GACjB1C,EAAMmC,MAAMO,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASzCtB,WAAYxB,EAAMwB","file":"static/js/5.681363a3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n\tconst hasError = touched && error;\r\n\treturn (\r\n\t\t<div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n\t\t\t<div>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t\t{ hasError && <span>{error}</span> }\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n\tconst {input, meta, child, ...restProps} = props;\r\n\treturn (\r\n\t\t<FormControl {...props} >\r\n\t\t\t<input {...input} {...restProps} />\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport const Input = (props) => {\r\n\tconst {input, meta, child, ...restProps} = props;\r\n\treturn (\r\n\t\t<FormControl {...props}>\r\n\t\t\t<input {...input} {...restProps} />\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport const createField = (placeholder, name, validators, component, props= {}, text=\"\") => (\r\n\t\t<div>\r\n\t\t\t\t<Field name={name}\r\n\t\t\t\t\t\t\t validate={validators}\r\n\t\t\t\t\t\t\t placeholder={placeholder}\r\n\t\t\t\t\t\t\t component={component}\r\n\t\t\t\t\t\t\t {...props}\r\n\t\t\t\t/> {text}\r\n\t\t</div>\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__32uWb\",\"error\":\"FormsControls_error__3Jep2\",\"formSummaryError\":\"FormsControls_formSummaryError__2nVCF\"};","export const required = (value) => {\r\n\tconst ERR_MSG = \"Поле не должно быть пустым\";\r\n\treturn value ? undefined : ERR_MSG;\r\n};\r\n\r\nexport const maxLenghtCreator = (maxLenght) => (value) => {\r\n\tconst ERR_MSG = `Поле должно содержать максимум ${maxLenght} символов`;\r\n\treturn (value.length <= maxLenght) ? undefined : ERR_MSG;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBtn\":\"login_loginBtn__1EN7N\"};","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../components/common/FormsControls/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\nimport {connect, MapStateToProps} from \"react-redux\";\r\nimport {login, logout} from \"../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport cn from \"classnames\";\r\n\r\nimport s from \"./login.module.css\"\r\nimport loginBtnBackground from \"../assets/img/iconLogin.png\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype LoginFormOwnProps = {\r\n\tcaptchaUrl:string | null,\r\n};\r\nconst LoginForm:React.FC<InjectedFormProps<LoginFormValuesType & LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) =>{\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t{createField(\"email\", \"email\", [required], Input, {type: \"text\"})}\r\n\r\n\t\t\t\t{createField(\"password\", \"password\", [required], Input, {type: \"password\"})}\r\n\r\n\t\t\t\t{createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember Me\")}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tcaptchaUrl && <img src={captchaUrl} />\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tcaptchaUrl && createField(\"Антибот\", \"captcha\", [required], Input, {type: \"text\"})\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\t\t\t{ error && <div className={s.formSummaryError}>\r\n\t\t\t\t{error}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div>\r\n\t\t\t\t<button  className={cn('btn', s.loginBtn)}\r\n\t\t\t\t\t\t\t\t style={{\r\n\t\t\t\t\tbackgroundImage: `url(${loginBtnBackground})`,\r\n\t\t\t\t}}></button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n\t// a unique name for the form\r\n\tform: 'login'\r\n})(LoginForm);\r\n\r\n\r\ntype MapStatePropsType = {\r\n\tisAuth:boolean,\r\n\tcaptchaUrl:string | null,\r\n};\r\ntype MapDispatchPropsType = {\r\n\tlogin: (email:string, password:string, rememberMe:boolean, captcha:string) => void,\r\n\tlogout: (email:string, password:string, rememberMe:boolean, captcha:string) => void,\r\n};\r\n\r\ntype LoginFormValuesType = {\r\n\temail:string,\r\n\tpassword:string,\r\n\trememberMe:boolean,\r\n\tcaptcha:string,\r\n};\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst Login:React.FC<PropsType> = (props) =>{\r\n\tconst onSubmit = (formData:any) => {\r\n\t\tprops.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n\t};\r\n\r\n\tif (props.isAuth){\r\n\t\treturn <Redirect to={\"/Profile\"} />\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<h1>Login</h1>\r\n\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n\t</div>;\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n\treturn {\r\n\t\tisAuth: state.auth.isAuth,\r\n\t\tcaptchaUrl: state.auth.captchaUrl,\r\n\t}\r\n};\r\n\r\nconst mapDispatchToProps:MapDispatchPropsType = {\r\n\tlogin,\r\n\tlogout\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"],"sourceRoot":""}